pipeline {
    agent any 
   
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }

    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
        registry = 'rajatsa/frontmulticloud'
        registryCredential = 'docker'
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Sonarqube Analysis') {
            environment {
                scannerHome = tool 'sonar'
            }

            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=multicloud-frontend \
                        -Dsonar.projectName=multicloud-frontend \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=src/ \
                        -Dsonar.java.binaries=target/test-classes/com/rajatsa/account/controllerTest/ \
                        -Dsonar.junit.reportsPath=target/surefire-reports/ \
                        -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                    }

                    timeout(time: 10, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/frontend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage('Install Trivy') {
            steps {
                sh '''
                sudo apt-get install wget apt-transport-https gnupg lsb-release -y
                wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
                echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
                sudo apt update
                sudo apt install trivy -y
                '''
            }
        }

        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/frontend') {
                        dockerImage = docker.build registry + ":V$BUILD_NUMBER"
                    }
                }
            }
        }

        stage('Deploy Image') {
          steps{
            script {
                dir('Application-Code/frontend') {
                    docker.withRegistry( '', registryCredential ) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
              }
            }
          }
        }

        stage("TRIVY Image Scan") {
            steps {
                sh "trivy image $registry:V$BUILD_NUMBER > trivyimage.txt" 
            }
        }

        stage('Remove Unused docker image') {
          steps{
            script {
                dir('Application-Code/frontend') {
                    sh "docker rmi $registry:V$BUILD_NUMBER"
                }
            }
          }
        }

        stage('Kubernetes Deploy') {
            agent { label 'AWS-KOPS' }
                steps {
                    sh "helm upgrade --install --force multicloud-stack helm/multicloudcharts --set appimage=${registry}:V${BUILD_NUMBER} --namespace prod"
                }
        }

        stage('Kubernetes Deploy') {
            agent { label 'AZURE-KOPS' }
                steps {
                    sh "helm upgrade --install --force multicloud-stack helm/multicloudcharts --set appimage=${registry}:V${BUILD_NUMBER} --namespace prod"
                }
        }

        stage('Kubernetes Deploy') {
            agent { label 'GCP-KOPS' }
                steps {
                    sh "helm upgrade --install --force multicloud-stack helm/multicloudcharts --set appimage=${registry}:V${BUILD_NUMBER} --namespace prod"
                }
        }
    }
}