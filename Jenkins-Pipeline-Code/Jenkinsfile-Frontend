pipeline {
    agent any 
   
    tools {
        jdk 'jdk-17'
        nodejs 'nodejs'
    }

    environment  {
        registry = 'rajatsa/frontmulticloud'
        registryCredential = 'dockerhub'
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Source Code') {
            steps {
                checkout scm
            }
        }

        stage('Sonarqube Analysis') {
            environment {
                scannerHome = tool 'sonar'
            }

            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=multicloud-frontend \
                        -Dsonar.projectName=multicloud-frontend'''
                    }

                    timeout(time: 10, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/frontend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage('Install Trivy') {
            steps {
                sh '''
                sudo apt-get install wget apt-transport-https gnupg lsb-release -y
                wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
                echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
                sudo apt update
                sudo apt install trivy -y
                '''
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/frontend') {
                        dockerImage = docker.build registry + ":$BUILD_NUMBER"
                    }
                }
            }
        }

        stage('Deploy Image') {
          steps{
            script {
                dir('Application-Code/frontend') {
                    docker.withRegistry( '', registryCredential ) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
              }
            }
          }
        }

        stage("TRIVY Image Scan") {
            steps {
                sh "trivy image $registry:$BUILD_NUMBER > trivyimage.txt" 
            }
        }

        stage('Remove Unused docker image') {
          steps{
            script {
                dir('Application-Code/frontend') {
                    sh "docker rmi $registry:$BUILD_NUMBER"
                }
            }
          }
        }

        stage('Install kubectl') {
            steps{
                    sh '''
                    curl -LO https://dl.k8s.io/release/v1.23.6/bin/linux/amd64/kubectl
                    sudo chmod +x ./kubectl
                    sudo mv kubectl /usr/local/bin/
                    '''
                }
        }

        stage('Create namespace in AWS') {
            steps{
                withKubeConfig([credentialsId: 'aws-kubefile', serverUrl: 'https://D508A0B02624B7C0BB37F1B09B94B608.gr7.us-east-1.eks.amazonaws.com']) { // Change serverUrl as per your needs
                    script {
                        def prodExists = sh(script: 'kubectl get namespace prod --ignore-not-found=true', returnStatus: true)
                        def threetierExists = sh(script: 'kubectl get namespace three-tier --ignore-not-found=true', returnStatus: true)
                        if (prodExists == 0 && threetierExists == 0) {
                            echo "Namespace 'prod' & 'three-tier' already exists. Skipping creation."
                        } else {
                            sh '''
                            kubectl create namespace three-tier
                            kubectl create namespace prod
                            '''
                            echo "Namespace 'prod' & 'three-tier' created successfully."
                        }
                    }
                }
            }
        }

        stage('Kubernetes Deploy on AWS') {
            agent { label 'AWS-KOPS' }
                steps {
                    sh "helm upgrade --install --force multicloud-stack helm/aws/frontendcharts --set frontimage=${registry}:${BUILD_NUMBER} --namespace prod --kubeconfig ~/.kube/config"
                }
        }

        // stage('Create namespace in Azure') {
        //     steps{
        //         withKubeConfig([credentialsId: 'azure-kubefile', serverUrl: 'https:test.com']) { // Change serverUrl as per your needs
        //             script {
        //                 def prodExists = sh(script: 'kubectl get namespace prod --ignore-not-found=true', returnStatus: true)
        //                 def threetierExists = sh(script: 'kubectl get namespace three-tier --ignore-not-found=true', returnStatus: true)
        //                 if (prodExists == 0 && threetierExists == 0) {
        //                     echo "Namespace 'prod' & 'three-tier' already exists. Skipping creation."
        //                 } else {
        //                     sh '''
        //                     kubectl create namespace three-tier
        //                     kubectl create namespace prod
        //                     '''
        //                     echo "Namespace 'prod' & 'three-tier' created successfully."
        //                 }
        //             }
        //         }
        //     }
        // }

        // stage('Kubernetes Deploy on Azure') {
        //     agent { label 'AZURE-KOPS' }
        //         steps {
        //             sh "helm upgrade --install --force multicloud-stack helm/azure/frontendcharts --set appimage=${registry}:${BUILD_NUMBER} --namespace prod --kubeconfig ~/.kube/config"
        //         }
        // }

        stage('Create namespace in GCP') {
            steps{
                withKubeConfig([credentialsId: 'gcp-kubefile', serverUrl: 'https://35.201.208.250']) { // Change serverUrl as per your needs
                    script {
                        def prodExists = sh(script: 'kubectl get namespace prod --ignore-not-found=true', returnStatus: true)
                        def threetierExists = sh(script: 'kubectl get namespace three-tier --ignore-not-found=true', returnStatus: true)
                        if (prodExists == 0 && threetierExists == 0) {
                            echo "Namespace 'prod' & 'three-tier' already exists. Skipping creation."
                        } else {
                            sh '''
                            kubectl create namespace three-tier
                            kubectl create namespace prod
                            '''
                            echo "Namespace 'prod' & 'three-tier' created successfully."
                        }
                    }
                }
            }
        }

        stage('Kubernetes Deploy on GCP') {
            agent { label 'GCP-KOPS' }
                steps {
                    sh "helm upgrade --install --force multicloud-stack helm/gcp/frontendcharts --set frontimage=${registry}:${BUILD_NUMBER} --namespace prod --kubeconfig ~/.kube/config"
                }
        }
    }
}