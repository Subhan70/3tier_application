pipeline {
    agent any

    tools {
        terraform "terraform"
        gcloud "gcloud"
    }

    environment {
        USE_GKE_GCLOUD_AUTH_PLUGIN = 'True'
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        
        stage('Checkout Source Code') {
            steps {
                checkout scm
            }
        }

        stage('Gcloud authorization') {
            steps {
                withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'GCLOUD_SERVICE_ACCOUNT_CREDENTIALS')]) {
                    sh 'gcloud auth activate-service-account --key-file=${GCLOUD_SERVICE_ACCOUNT_CREDENTIALS}'
                }
            }
        }

        stage('Azure login') {
            steps {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
                }
            }
        }
        
        stage('Initialize Terraform') {
            steps {
                dir('./terraform') {
                    withAWS(credentials: 'aws-access-key-id', region: 'us-east-1') {
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Terraform Format') {
            steps {
                script {
                    dir('./terraform') {
                        withAWS(credentials: 'aws-access-key-id', region: 'us-east-1') {
                            sh 'terraform fmt -check'
                        }
                    }
                }
            }
        }

        stage('Terraform Validate') {
            steps {
                script {
                    dir('./terraform') {
                        withAWS(credentials: 'aws-access-key-id', region: 'us-east-1') {
                            sh 'terraform validate'
                        }
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('./terraform') {
                    withAWS(credentials: 'aws-access-key-id', region: 'us-east-1') {
                        sh '''
                        terraform plan -no-color -input=false -out planfile
                        '''
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('./terraform') {
                    withAWS(credentials: 'aws-access-key-id', region: 'us-east-1') {
                        sh 'terraform apply -auto-approve -input=false -parallelism=1 planfile'
                    }
                }
            }
        }

        stage('Set environment variable') {
            steps {
                script {
                    sh 'export USE_GKE_GCLOUD_AUTH_PLUGIN=True'
                }
            }
        }

        stage('Update kubeconfig for AWS EKS') {
            steps {
                dir('./terraform') {
                    withAWS(credentials: 'aws-access-key-id', region: 'us-east-1') {
                        sh 'aws eks update-kubeconfig --region us-east-1 --name threetier-eks' // Update placeholders as per your needs
                    }
                }
            }
        }

        // stage('Update kubeconfig for Azure AKS') {
        //     steps {
        //    dir('./terraform') {
        //           withAWS(credentials: 'aws-access-key-id', region: 'us-east-1') {
        //         sh 'az aks get-credentials --name multicloud-aks --resource-group eastus' // Update placeholders as per your needs
        //        }
        //     }
        // }

        stage('Update kubeconfig for GCP GKE') {
            steps {
                dir('./terraform') {
                    withAWS(credentials: 'aws-access-key-id', region: 'us-east-1') {
                        sh 'gcloud container clusters get-credentials multicloud-gke --zone asia-east1 --project three-tier-multicloud' // Update placeholders as per your needs
                    }
                }
            }
        }
    }
}